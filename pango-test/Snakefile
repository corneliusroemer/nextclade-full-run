subsample_ratio = 0.02
split_number = 100

localrules: clean,download_metadata,subsample_sequences,diff,split_nextclade_results,collect_nextclade_results,unzip_split,split_sequences,download_nextclade_dataset,download_sequences

rule all:
    input: "usher.csv","nextclade_clades.tsv", "pangolearn.csv",
        "usher_clades_meta.tsv"

rule download_sequences:
    output: "data/sequences.fasta.xz"
    shell: "aws s3 cp s3://nextstrain-ncov-private/sequences.fasta.xz {output}"

rule download_metadata:
    output: "data/metadata.tsv.gz"
    shell: "aws s3 cp s3://nextstrain-ncov-private/metadata.tsv.gz {output}"

rule subsample_sequences:
    input: rules.download_sequences.output
    output: "data/subsample.fasta.gz"
    shell: "xz -dc -T0 {input} | seqkit sample -p {subsample_ratio} -o {output}" 

rule split_sequences:
    input: rules.subsample_sequences.output
    output: temp(expand("split/{{filename}}.part_{part:03d}.fasta.gz", part=range(1,split_number+1)))
    params: lambda w: f"data/{w.filename}.fasta.gz"
    shell:
        """
        cp {input} {params}; \
        seqkit split2 {params} -p {split_number} -O split; \
        rm {params}
        """

rule unzip_split:
    input: "split/{prefix}_subsample.part_{part}.fasta.gz"
    output: temp("split/{prefix}_subsample.part_{part}.fasta")
    shell: "gunzip -c {input} > {output}"

rule download_nextclade_dataset:
    output: 
        out_dir=directory("data/nextclade_dataset"),
        tree="data/nextclade_dataset/tree.json",
    shell: "nextclade dataset get --name='sars-cov-2' --output-dir={output.out_dir}"

# Need to add meta field to infer lineages
rule add_custom_node_attr_to_meta:
    input:
        auspice_json= rules.download_nextclade_dataset.output.tree,
    output:
        auspice_json= "data/tree.json"
    shell:
        """
        cat {input.auspice_json} | \
        jq '.meta.extensions.nextclade.clade_node_attrs_keys = ["inferred_lineage"]' \
        > {output.auspice_json} 2>&1
        """

rule run_nextclade:
    input:
        sequences = "split/all_subsample.part_{part}.fasta",
        tree = "data/tree.json",
        dataset = rules.download_nextclade_dataset.output.out_dir
    output:
        output_tsv = temp("results/nextclade_results_{part}.tsv"),
    params:
        output_alignments = "data/alignments_{part}",
    threads: 4
    shell:
        """
        nextclade run \
            -j{threads} \
            --in-order \
            -i {input.sequences} \
            --input-dataset {input.dataset} \
            -a {input.tree} \
            -t {output.output_tsv} \
            -d {params.output_alignments};
        rm -r {params.output_alignments}; \
        """

rule collect_nextclade_results:
    input: expand("results/nextclade_results_{part:03d}.tsv", part=range(1,split_number+1))
    output: "nextclade.tsv"
    shell: "keep-header {input} -- cat | dos2unix > {output}"


rule run_usher:
    input:
        sequences = "split/all_subsample.part_{part}.fasta",
    output:
        assignments = temp("results/pango_usher_{part}.csv")
    threads: 4
    shell:
        """
        pangolin {input.sequences} --usher --outfile {output.assignments} --skip-designation-hash --threads={threads} 2>&1
        """

rule collect_usher_results:
    input: expand("results/pango_usher_{part:03d}.csv", part=range(1,split_number+1))
    output: "usher.csv"
    shell: "keep-header {input} -- cat | dos2unix > {output}"

rule run_pangolearn:
    input:
        sequences = "split/all_subsample.part_{part}.fasta",
    output:
        assignments = temp("results/pango_pangolearn_{part}.csv")
    threads: 4
    shell:
        """
        pangolin {input.sequences} --outfile {output.assignments} --skip-designation-hash --threads={threads} 2>&1
        """

rule collect_pangolearn_results:
    input: expand("results/pango_pangolearn_{part:03d}.csv", part=range(1,split_number+1))
    output: "pangolearn.csv"
    shell: "keep-header {input} -- cat | dos2unix > {output}"

rule split_nextclade_results:
    input: "nextclade.tsv"
    output:
        clades = "nextclade_clades.tsv",
    shell:
        """
        tsv-select -H -f seqName,clade,inferred_lineage {input} > {output.clades};
        """

rule join_usher_clades:
    input:
        usher="usher.csv",
        clades="nextclade_clades.tsv",
    output:
        joined="usher_clades.tsv"
    shell:
        """
        csv2tsv {input.usher} | tsv-join -H -f {input.clades} -k1 -a 1-3 | tsv-select -H -f seqName,clade,inferred_lineage,2 > {output.joined}
        """

rule join_pangolearn_usher_clades:
    input:
        pangolearn="pangolearn.csv",
        joined="usher_clades.tsv",
    output:
        joined="pangolearn_usher_clades.tsv"
    shell:
        """
        csv2tsv {input.pangolearn} | tsv-join -H -f {input.joined} -k1 -a 1-4 | tsv-select -H -f seqName,clade,inferred_lineage,lineage,2 > {output.joined}
        """

rule join_meta:
    input:
        joined = "pangolearn_usher_clades.tsv",
        meta = "data/metadata.tsv.gz",
    output:
        joined = "usher_clades_meta.tsv"
    shell:
        """
        gzip -cd {input.meta} | tsv-join -H -f {input.joined} -k1 -a 1-5 > {output.joined}
        """

# Calculate agreement (with consensus)
# Add pango designations to metadata
# Sample from designations only
# Run pangoLEARN skipping designations

rule clean:
    shell: "rm log/* *.diff *.tsv; rm -r results data/nextclade_dataset bin logs split"